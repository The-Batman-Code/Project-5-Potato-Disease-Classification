[{"D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\index.js":"1","D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\App.js":"2","D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\reportWebVitals.js":"3","D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\home.js":"4"},{"size":500,"mtime":1679950537482,"results":"5","hashOfConfig":"6"},{"size":105,"mtime":1679950537247,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1679950537514,"results":"8","hashOfConfig":"6"},{"size":10183,"mtime":1680377450539,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17pf5s5",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\index.js",[],[],"D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\App.js",[],[],"D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\reportWebVitals.js",[],[],"D:\\Programming\\Python\\Projects\\5-Potato-Deep-Learning\\frontend\\src\\home.js",["23"],[],"import { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {\r\n  Paper,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport cblogo from \"./cblogo.png\";\r\nimport image from \"./bg.png\";\r\nimport { DropzoneArea } from \"material-ui-dropzone\";\r\nimport { common } from \"@material-ui/core/colors\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\n\r\nconst ColorButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(common.white),\r\n    backgroundColor: common.white,\r\n    \"&:hover\": {\r\n      backgroundColor: \"#ffffff7a\",\r\n    },\r\n  },\r\n}))(Button);\r\nconst axios = require(\"axios\").default;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  clearButton: {\r\n    width: \"-webkit-fill-available\",\r\n    borderRadius: \"15px\",\r\n    padding: \"15px 22px\",\r\n    color: \"#000000\",\r\n    fontSize: \"20px\",\r\n    fontWeight: 900,\r\n    fontFamily: \"Changa\",\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    height: 400,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n    maxWidth: 500,\r\n  },\r\n  gridContainer: {\r\n    justifyContent: \"center\",\r\n    padding: \"4em 1em 0 1em\",\r\n  },\r\n  mainContainer: {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"cover\",\r\n    height: \"93vh\",\r\n    marginTop: \"8px\",\r\n  },\r\n  imageCard: {\r\n    margin: \"auto\",\r\n    maxWidth: 400,\r\n    height: 500,\r\n    backgroundColor: \"transparent\",\r\n    boxShadow: \"0px 9px 70px 0px rgb(0 0 0 / 30%) !important\",\r\n    borderRadius: \"15px\",\r\n  },\r\n  imageCardEmpty: {\r\n    height: \"auto\",\r\n  },\r\n  noImage: {\r\n    margin: \"auto\",\r\n    width: 400,\r\n    height: \"400 !important\",\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  uploadIcon: {\r\n    background: \"white\",\r\n  },\r\n  tableContainer: {\r\n    backgroundColor: \"transparent !important\",\r\n    boxShadow: \"none !important\",\r\n  },\r\n  table: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  tableHead: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  tableRow: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  tableCell: {\r\n    fontSize: \"22px\",\r\n    backgroundColor: \"transparent !important\",\r\n    borderColor: \"transparent !important\",\r\n    color: \"#000000 !important\",\r\n    fontWeight: \"bolder\",\r\n    padding: \"1px 24px 1px 16px\",\r\n    fontFamily: \"Changa\",\r\n  },\r\n  tableCell1: {\r\n    fontSize: \"14px\",\r\n    backgroundColor: \"transparent !important\",\r\n    borderColor: \"transparent !important\",\r\n    color: \"#000000 !important\",\r\n    fontWeight: \"bolder\",\r\n    padding: \"1px 24px 1px 16px\",\r\n    fontFamily: \"Changa\",\r\n  },\r\n  tableBody: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  text: {\r\n    color: \"white !important\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonGrid: {\r\n    maxWidth: \"416px\",\r\n    width: \"100%\",\r\n  },\r\n  detail: {\r\n    backgroundColor: \"white\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  appbar: {\r\n    background: \"#000000\",\r\n    boxShadow: \"none\",\r\n    color: \"white\",\r\n  },\r\n  loader: {\r\n    color: \"#000000 !important\",\r\n  },\r\n}));\r\nexport const ImageUpload = () => {\r\n  const classes = useStyles();\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n  const [data, setData] = useState();\r\n  const [image, setImage] = useState(false);\r\n  const [isLoading, setIsloading] = useState(false);\r\n  let confidence = 0;\r\n\r\n  const sendFile = async () => {\r\n    if (image) {\r\n      let formData = new FormData();\r\n      formData.append(\"file\", selectedFile);\r\n      let res = await axios({\r\n        method: \"post\",\r\n        url: process.env.REACT_APP_API_URL,\r\n        data: formData,\r\n      });\r\n      if (res.status === 200) {\r\n        setData(res.data);\r\n      }\r\n      setIsloading(false);\r\n    }\r\n  };\r\n\r\n  const clearData = () => {\r\n    setData(null);\r\n    setImage(false);\r\n    setSelectedFile(null);\r\n    setPreview(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n    const objectUrl = URL.createObjectURL(selectedFile);\r\n    setPreview(objectUrl);\r\n  }, [selectedFile]);\r\n\r\n  useEffect(() => {\r\n    if (!preview) {\r\n      return;\r\n    }\r\n    setIsloading(true);\r\n    sendFile();\r\n  }, [preview]);\r\n\r\n  const onSelectFile = (files) => {\r\n    if (!files || files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      setImage(false);\r\n      setData(undefined);\r\n      return;\r\n    }\r\n    setSelectedFile(files[0]);\r\n    setData(undefined);\r\n    setImage(true);\r\n  };\r\n\r\n  if (data) {\r\n    confidence = (parseFloat(data.confidence) * 100).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            <span className=\"font-link\">Potato Disease Classification</span>\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <Avatar src={cblogo}></Avatar>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container\r\n        maxWidth={false}\r\n        className={classes.mainContainer}\r\n        disableGutters={true}\r\n      >\r\n        <Grid\r\n          className={classes.gridContainer}\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item xs={12}>\r\n            <Card\r\n              className={`${classes.imageCard} ${\r\n                !image ? classes.imageCardEmpty : \"\"\r\n              }`}\r\n            >\r\n              {image && (\r\n                <CardActionArea>\r\n                  <CardMedia\r\n                    className={classes.media}\r\n                    image={preview}\r\n                    component=\"image\"\r\n                    title=\"Image Preview\"\r\n                  />\r\n                </CardActionArea>\r\n              )}\r\n              {!image && (\r\n                <CardContent className={classes.content}>\r\n                  <DropzoneArea\r\n                    acceptedFiles={[\"image/*\"]}\r\n                    dropzoneText={\r\n                      <span className=\"font-link\">\r\n                        Drag and drop an image of a potato plant leaf to process\r\n                      </span>\r\n                    }\r\n                    onChange={onSelectFile}\r\n                    maxFileSize={20000000}\r\n                  />\r\n                </CardContent>\r\n              )}\r\n              {data && (\r\n                <CardContent className={classes.detail}>\r\n                  <TableContainer\r\n                    component={Paper}\r\n                    className={classes.tableContainer}\r\n                  >\r\n                    <Table\r\n                      className={classes.table}\r\n                      size=\"small\"\r\n                      aria-label=\"simple table\"\r\n                    >\r\n                      <TableHead className={classes.tableHead}>\r\n                        <TableRow className={classes.tableRow}>\r\n                          <TableCell className={classes.tableCell1}>\r\n                            <span className=\"font-link\">Label:</span>\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"right\"\r\n                            className={classes.tableCell1}\r\n                          >\r\n                            <span className=\"font-link\">Confidence:</span>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody className={classes.tableBody}>\r\n                        <TableRow className={classes.tableRow}>\r\n                          <TableCell\r\n                            component=\"th\"\r\n                            scope=\"row\"\r\n                            className={classes.tableCell}\r\n                          >\r\n                            {data.class}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"right\"\r\n                            className={classes.tableCell}\r\n                          >\r\n                            {confidence}%\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </CardContent>\r\n              )}\r\n              {isLoading && (\r\n                <CardContent className={classes.detail}>\r\n                  <CircularProgress\r\n                    color=\"secondary\"\r\n                    className={classes.loader}\r\n                  />\r\n                  <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                    <span className=\"font-link\">Processing</span>\r\n                  </Typography>\r\n                </CardContent>\r\n              )}\r\n            </Card>\r\n          </Grid>\r\n          {data && (\r\n            <Grid item className={classes.buttonGrid}>\r\n              <ColorButton\r\n                variant=\"contained\"\r\n                className={classes.clearButton}\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                size=\"large\"\r\n                onClick={clearData}\r\n                startIcon={<Clear fontSize=\"large\" />}\r\n              >\r\n                <span className=\"font-link\">Clear</span>\r\n              </ColorButton>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n",{"ruleId":"24","severity":1,"message":"25","line":206,"column":6,"nodeType":"26","endLine":206,"endColumn":15,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sendFile'. Either include it or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [preview, sendFile]",{"range":"31","text":"32"},[4938,4947],"[preview, sendFile]"]